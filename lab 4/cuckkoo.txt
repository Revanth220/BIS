import numpy as np
import math

def objective_function(x):
    return sum(x**2)

def levy_flight(beta, d):
    sigma_u = (math.gamma(1 + beta) * math.sin(math.pi * beta / 2) /
               (math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2)))(1 / beta)
    u = np.random.normal(0, sigma_u, d)
    v = np.random.normal(0, 1, d)
    step = u / (abs(v)(1 / beta))
    return step

def cuckoo_search(n, d, alpha, pa, maxGen):
    nests = np.random.uniform(-10, 10, (n, d))
    fitness = np.array([objective_function(nest) for nest in nests])
    best_nest_index = np.argmin(fitness)
    best_nest = nests[best_nest_index]
    best_fitness = fitness[best_nest_index]
    beta = 1.5

    for gen in range(maxGen):
        for i in range(n):
            step = levy_flight(beta, d)
            new_nest = nests[i] + alpha * step * (nests[i] - best_nest)
            new_nest = np.clip(new_nest, -10, 10)
            new_fitness = objective_function(new_nest)
            if new_fitness < fitness[i]:
                nests[i] = new_nest
                fitness[i] = new_fitness

        for i in range(n):
            if np.random.rand() < pa:
                nests[i] = np.random.uniform(-10, 10, d)
                fitness[i] = objective_function(nests[i])

        best_nest_index = np.argmin(fitness)
        if fitness[best_nest_index] < best_fitness:
            best_nest = nests[best_nest_index]
            best_fitness = fitness[best_nest_index]
    return best_nest, best_fitness

n = 25
d = 5
alpha = 0.01
pa = 0.25
maxGen = 100

best_solution, best_value = cuckoo_search(n, d, alpha, pa, maxGen)
print("Best Solution:", best_solution)
print("Best Fitness Value:", best_value)
print("Name=REVANTH K")
print("USN=1BM22CS220")