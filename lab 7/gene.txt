import random

# Constants for the genetic algorithm
POPULATION_SIZE = 100
GENERATIONS = 5
MUTATION_RATE = 0.1
CROSSOVER_RATE = 0.7
MAX_TREE_DEPTH = 5
FUNCTIONS = ['+', '*', '/']
TERMINALS = ['x', '1', '2', '3']

class Individual:
    def _init_(self, expression):
        self.expression = expression
        self.fitness = float('inf')

    def evaluate_fitness(self, x_value):
        try:
            # Safeguard against invalid expressions
            expr = self.expression.replace('x', str(x_value))
            self.fitness = eval(expr)
        except (ZeroDivisionError, SyntaxError, ValueError):
            self.fitness = float('inf')

def generate_random_expression(depth):
    if depth == 0 or random.random() < 0.3:
        return random.choice(TERMINALS)
    else:
        function = random.choice(FUNCTIONS)
        left = generate_random_expression(depth - 1)
        right = generate_random_expression(depth - 1)
        return f"({left} {function} {right})"

def generate_random_individual():
    expression = generate_random_expression(MAX_TREE_DEPTH)
    return Individual(expression)

def crossover(parent1, parent2):
    expr1, expr2 = parent1.expression, parent2.expression
    split1 = random.choice(expr1.split())
    split2 = random.choice(expr2.split())
    offspring_expr = expr1.replace(split1, split2, 1)
    return Individual(offspring_expr)

def mutate(individual):
    if random.random() < MUTATION_RATE:
        mutated_expr = individual.expression
        mutated_expr = mutated_expr.replace(
            random.choice(mutated_expr.split()),
            generate_random_expression(MAX_TREE_DEPTH),
            1
        )
        individual.expression = mutated_expr

def select_best_individual(population, x_value):
    for individual in population:
        individual.evaluate_fitness(x_value)
    return min(population, key=lambda ind: ind.fitness)

def run_gep_algorithm():
    population = [generate_random_individual() for _ in range(POPULATION_SIZE)]
    for generation in range(GENERATIONS):
        best_individual = select_best_individual(population, 3)
        print(f"Generation {generation + 1}: Best fitness = {best_individual.fitness}")

        new_population = []
        while len(new_population) < POPULATION_SIZE:
            if random.random() < CROSSOVER_RATE:
                parent1 = random.choice(population)
                parent2 = random.choice(population)
                offspring = crossover(parent1, parent2)
                new_population.append(offspring)
            else:
                individual = random.choice(population)
                mutate(individual)
                new_population.append(individual)

        population = new_population

    print("Name=REVANTH K")
    print("USN=1BM22CS220")

run_gep_algorithm()